{"id":"js/shaders/spiral_fragment.glsl","dependencies":[{"name":"/Users/avinvadas/Documents/code projects/ripple_01/package.json","includedInParent":true,"mtime":1646402075729}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\n#define PI 3.14159265359\\n// Uniforms\\nuniform vec2 u_resolution;\\nuniform vec2 u_mouse;\\nuniform float u_time;\\n  \\n\\nfloat circle(vec2 st, vec2 center, float radius){\\nfloat d = distance(st, vec2(pow(center.x,2.0 ),pow(center.y,1.0 )));\\n//apply ripple effect to each circle based on mouse distance from center\\nd += 0.1*sin(distance(st, vec2(u_mouse/u_resolution.xy)) * (0.5 - float(u_mouse/u_resolution.xy*10.)) - (u_time*0.1));\\n\\nreturn 1.-smoothstep(radius-0.01, radius, d);\\n}\\n\\n  \\nfloat totalRadius = 0.0;\\n//create multiple circles with different sizes on single ratio\\nfloat circles(vec2 st, vec2 center, float ratio, int circlesNum){\\nfloat color = 0.;\\nfor(int i = 0; i < circlesNum; i++){\\nfloat radius = ratio *float(i-1);\\nradius += 0.22*sin(fract((u_time*0.1)));\\nif(i == circlesNum -1){\\nradius = ratio *float(i-1);\\ntotalRadius = radius;\\n//set area outside of the last circle to white\\n\\n}\\ncolor += circle(st, vec2(1.0, (1.5 - (1.0-radius*2.0))-radius), radius);\\n}\\n//apply ripple effect to each circle based on mouse position\\ncolor += 0.1*sin(distance(st, vec2(0.5, 0.5)) * 10.0 - (u_time*0.1));\\nreturn color;\\n}\\n\\n// Main\\nvoid main(){\\n\\n// Normalized pixel coordinates (from 0 to 1)\\nvec2 uv = gl_FragCoord.xy/ u_resolution.xy;\\n//normalize mouse position\\nvec2 mouse = u_mouse/u_resolution.xy;\\n// Time varying pixel color\\n\\n  uv = uv *2.0 ;\\n  mouse = mouse * 4.0;\\n\\nfloat colorlayer = circles(uv, vec2(0.5, 0.5), 0.20, 8);\\nvec3 color = vec3(colorlayer * (sin((PI+u_time*0.1))), 0.0,colorlayer * 0.15) * (sin((PI+u_time*0.1)));\\n\\ncolor += vec3(colorlayer , colorlayer * 0.15,1.0-colorlayer);\\ncolor -= vec3(0.0,0.0,1.0-colorlayer);\\n//set area outside of the last circle to white\\n\\ngl_FragColor = vec4(color, 1.0);\\n}\\n\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"js/shaders/spiral_fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"js/shaders/spiral_fragment.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"js/shaders/spiral_fragment.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"js/shaders/spiral_fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"js/shaders/spiral_fragment.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":1795},"source":"js/shaders/spiral_fragment.glsl","original":{"line":1,"column":0}}],"sources":{"js/shaders/spiral_fragment.glsl":"module.exports=\"#define GLSLIFY 1\\n#define PI 3.14159265359\\n// Uniforms\\nuniform vec2 u_resolution;\\nuniform vec2 u_mouse;\\nuniform float u_time;\\n  \\n\\nfloat circle(vec2 st, vec2 center, float radius){\\nfloat d = distance(st, vec2(pow(center.x,2.0 ),pow(center.y,1.0 )));\\n//apply ripple effect to each circle based on mouse distance from center\\nd += 0.1*sin(distance(st, vec2(u_mouse/u_resolution.xy)) * (0.5 - float(u_mouse/u_resolution.xy*10.)) - (u_time*0.1));\\n\\nreturn 1.-smoothstep(radius-0.01, radius, d);\\n}\\n\\n  \\nfloat totalRadius = 0.0;\\n//create multiple circles with different sizes on single ratio\\nfloat circles(vec2 st, vec2 center, float ratio, int circlesNum){\\nfloat color = 0.;\\nfor(int i = 0; i < circlesNum; i++){\\nfloat radius = ratio *float(i-1);\\nradius += 0.22*sin(fract((u_time*0.1)));\\nif(i == circlesNum -1){\\nradius = ratio *float(i-1);\\ntotalRadius = radius;\\n//set area outside of the last circle to white\\n\\n}\\ncolor += circle(st, vec2(1.0, (1.5 - (1.0-radius*2.0))-radius), radius);\\n}\\n//apply ripple effect to each circle based on mouse position\\ncolor += 0.1*sin(distance(st, vec2(0.5, 0.5)) * 10.0 - (u_time*0.1));\\nreturn color;\\n}\\n\\n// Main\\nvoid main(){\\n\\n// Normalized pixel coordinates (from 0 to 1)\\nvec2 uv = gl_FragCoord.xy/ u_resolution.xy;\\n//normalize mouse position\\nvec2 mouse = u_mouse/u_resolution.xy;\\n// Time varying pixel color\\n\\n  uv = uv *2.0 ;\\n  mouse = mouse * 4.0;\\n\\nfloat colorlayer = circles(uv, vec2(0.5, 0.5), 0.20, 8);\\nvec3 color = vec3(colorlayer * (sin((PI+u_time*0.1))), 0.0,colorlayer * 0.15) * (sin((PI+u_time*0.1)));\\n\\ncolor += vec3(colorlayer , colorlayer * 0.15,1.0-colorlayer);\\ncolor -= vec3(0.0,0.0,1.0-colorlayer);\\n//set area outside of the last circle to white\\n\\ngl_FragColor = vec4(color, 1.0);\\n}\\n\";"},"lineCount":null}},"error":null,"hash":"76d52ba2f8f00c683e67c4c9e933ae42","cacheData":{"env":{}}}